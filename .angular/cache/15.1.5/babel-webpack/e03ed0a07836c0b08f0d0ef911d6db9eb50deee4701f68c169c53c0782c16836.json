{"ast":null,"code":"import { initTeamsValue } from '../models/teams.model';\nimport { Subject } from 'rxjs';\nimport { environment as env } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./userInfo.service\";\nexport class TeamService {\n  constructor(http, userInfo) {\n    this.http = http;\n    this.userInfo = userInfo;\n    this.SDRConfig = {\n      success: Boolean,\n      settings: {\n        config: {\n          vics: {}\n        },\n        license: {}\n      }\n    };\n    this.teams = initTeamsValue;\n    this.teamsUpdated = new Subject();\n    this.getSDRConfig = new Subject();\n  }\n  getTeamsDetails() {\n    this.userInfo.getLoggedInUserListener().subscribe(user => {\n      this.http.post(`${env.apiURL}/teams`, {\n        email: user.email\n      }).subscribe(teamsData => {\n        this.teams = teamsData.data.teamsInfo;\n        this.teamsUpdated.next(this.teams);\n      });\n    });\n  }\n  getTeamSDRConfig(sit) {\n    console.log(\"Getting SDR team config\", sit, this.userInfo.userDetails.email);\n    const loggedInUser = this.userInfo.userDetails.email;\n    return this.http.post(`${env.apiURL}/team/settings`, {\n      email: loggedInUser,\n      sit\n    }).subscribe(config => {\n      this.SDRConfig = config;\n      console.log(\"====>\", this.SDRConfig);\n      this.getSDRConfig.next(config.settings.config.vics);\n    });\n  }\n  getTeamsListListener() {\n    return this.teamsUpdated.asObservable();\n  }\n  getSDRConfigListener() {\n    return this.getSDRConfig.asObservable();\n  }\n}\nTeamService.ɵfac = function TeamService_Factory(t) {\n  return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserInfoService));\n};\nTeamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TeamService,\n  factory: TeamService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,cAAc,QAAQ,uBAAuB;AAClE,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAASC,WAAW,IAAIC,GAAG,QAAQ,gCAAgC;;;;AAKnE,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB,EAASC,QAAyB;IAAlD,SAAI,GAAJD,IAAI;IAAqB,aAAQ,GAARC,QAAQ;IAL9C,cAAS,GAAG;MAACC,OAAO,EAAEC,OAAO;MAAEC,QAAQ,EAAE;QAACC,MAAM,EAAE;UAAEC,IAAI,EAAE;QAAE,CAAE;QAAEC,OAAO,EAAE;MAAE;IAAC,CAAC;IAC5E,UAAK,GAAeb,cAAc;IAClC,iBAAY,GAAG,IAAIC,OAAO,EAAc;IACxC,iBAAY,GAAG,IAAIA,OAAO,EAAE;EAEqC;EAEzEa,eAAe;IAEb,IAAI,CAACP,QAAQ,CAACQ,uBAAuB,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MACzD,IAAI,CAACX,IAAI,CAACY,IAAI,CAAmE,GAAGf,GAAG,CAACgB,MAAM,QAAQ,EAAE;QACtGC,KAAK,EAAEH,IAAI,CAACG;OACb,CAAC,CACDJ,SAAS,CAAEK,SAAS,IAAI;QACvB,IAAI,CAACC,KAAK,GAAGD,SAAS,CAACE,IAAI,CAACC,SAAS;QACrC,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAACJ,KAAK,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAK,gBAAgB,CAACC,GAAO;IACtBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,GAAG,EAAE,IAAI,CAACrB,QAAQ,CAACwB,WAAW,CAACX,KAAK,CAAC;IAC5E,MAAMY,YAAY,GAAG,IAAI,CAACzB,QAAQ,CAACwB,WAAW,CAACX,KAAK;IAEpD,OAAO,IAAI,CAACd,IAAI,CAACY,IAAI,CAAC,GAAGf,GAAG,CAACgB,MAAM,gBAAgB,EAAE;MACnDC,KAAK,EAAEY,YAAY;MACnBJ;KACD,CAAC,CACDZ,SAAS,CAAEL,MAAW,IAAI;MACzB,IAAI,CAACsB,SAAS,GAAGtB,MAAM;MACvBkB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE,IAAI,CAACG,SAAS,CAAC;MACpC,IAAI,CAACC,YAAY,CAACR,IAAI,CAACf,MAAM,CAACD,QAAQ,CAACC,MAAM,CAACC,IAAI,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAuB,oBAAoB;IAClB,OAAO,IAAI,CAACV,YAAY,CAACW,YAAY,EAAE;EACzC;EAEAC,oBAAoB;IAClB,OAAO,IAAI,CAACH,YAAY,CAACE,YAAY,EAAE;EACzC;;AA1CWhC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["initTeamsValue","Subject","environment","env","TeamService","constructor","http","userInfo","success","Boolean","settings","config","vics","license","getTeamsDetails","getLoggedInUserListener","subscribe","user","post","apiURL","email","teamsData","teams","data","teamsInfo","teamsUpdated","next","getTeamSDRConfig","sit","console","log","userDetails","loggedInUser","SDRConfig","getSDRConfig","getTeamsListListener","asObservable","getSDRConfigListener","factory","providedIn"],"sourceRoot":"","sources":["/home/ubuntu/SDR/MF-DAM-SDR-Client/src/app/services/team.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TeamsModel, initTeamsValue } from '../models/teams.model';\nimport { Subject } from 'rxjs';\nimport { UserInfoService } from './userInfo.service';\nimport { environment as env } from '../../environments/environment'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeamService {\n  public SDRConfig = {success: Boolean, settings: {config: { vics: {} }, license: {}}};\n  private teams: TeamsModel = initTeamsValue;\n  private teamsUpdated = new Subject<TeamsModel>();\n  private getSDRConfig = new Subject();\n\n  constructor(private http: HttpClient, public userInfo: UserInfoService) {}\n\n  getTeamsDetails() {\n\n    this.userInfo.getLoggedInUserListener().subscribe((user) => {\n      this.http.post<{ id: string; message: string; data: { teamsInfo: TeamsModel } }>(`${env.apiURL}/teams`, {\n        email: user.email\n      })\n      .subscribe((teamsData) => {\n        this.teams = teamsData.data.teamsInfo;\n        this.teamsUpdated.next(this.teams);\n      })\n    })\n  }\n\n  getTeamSDRConfig(sit:any) {\n    console.log(\"Getting SDR team config\", sit, this.userInfo.userDetails.email);\n    const loggedInUser = this.userInfo.userDetails.email;\n\n    return this.http.post(`${env.apiURL}/team/settings`, {\n      email: loggedInUser,\n      sit\n    })\n    .subscribe((config: any) => {\n      this.SDRConfig = config;\n      console.log(\"====>\", this.SDRConfig)\n      this.getSDRConfig.next(config.settings.config.vics);\n    });\n  }\n\n  getTeamsListListener() {\n    return this.teamsUpdated.asObservable();\n  }\n\n  getSDRConfigListener() {\n    return this.getSDRConfig.asObservable();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}